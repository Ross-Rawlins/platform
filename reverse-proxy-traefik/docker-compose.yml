version: "3.9"

services:
  reverse-proxy-traefik:
    image: traefik:v3.0.0
    networks:
      - traefik
    ports:
      - 80:80
      - 8080:8080
      - 443:443
    command:
      - --log
      - --log.level=${LOG_LEVEL}
      - --accesslog=true
      - --providers.swarm.exposedbydefault=false
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      - --serversTransport.insecureSkipVerify=${INSECURE_SKIP_VERIFY}
      - --api.insecure=${ENABLE_TRAEFIK_DASHBOARD}
      - --entrypoints.web.address=:80
      - --entryPoints.websecure.address=:443
      #certificate resolver
      - --certificatesresolvers.le.acme.email=${ACME_EMAIL?Variable not set}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.caserver=${CA_SERVER}
      - --certificatesresolvers.le.acme.dnschallenge.delaybeforecheck=0

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-public-certificates:/certificates
    deploy:
      replicas: 1
      labels:
        - traefik.docker.lbswarm=true
        - traefik.http.routers.to-https.rule=HostRegexp(`{host:.+}`)
        - traefik.http.routers.to-https.entrypoints=http
        - traefik.http.routers.to-https.middlewares=to-https

        - traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME_HOST_TRAEFIK}`) && PathPrefix(`/dashboard`)
        - traefik.http.routers.traefik.entrypoints=http
        - traefik.http.routers.traefik.middlewares=auth
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certresolver=${CERT_RESOLVER}
        - traefik.http.services.openhim-console.loadbalancer.server.port=8080

        - traefik.http.middlewares.to-https.redirectscheme.scheme=https
        - traefik.http.middlewares.auth.basicauth.users=${USERNAME}:${PASSWORD}

      placement:
        max_replicas_per_node: 1
        constraints:
          - node.role == ${PLACEMENT_ROLE_CONSTRAINTS}
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.1"
          memory: 64M

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure
  # Traefik is always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates
  traefik-public-certificates:


networks:
  traefik:
    name: reverse-proxy-traefik_public
    external: true
